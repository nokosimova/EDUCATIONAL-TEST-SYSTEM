// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestSystem.Db;

namespace TestSystem.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200612191245_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("TestSystem.Models.AnsQuestion", b =>
                {
                    b.Property<int>("AnsQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdStudent")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnsQuestionId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("AnsQuestions");
                });

            modelBuilder.Entity("TestSystem.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRightAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("TestSystem.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "1"
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "2"
                        },
                        new
                        {
                            CourseId = 3,
                            CourseName = "3"
                        },
                        new
                        {
                            CourseId = 4,
                            CourseName = "4"
                        });
                });

            modelBuilder.Entity("TestSystem.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            FacultyId = 1,
                            FacultyName = "ПМиИ"
                        },
                        new
                        {
                            FacultyId = 2,
                            FacultyName = "ГМУ"
                        });
                });

            modelBuilder.Entity("TestSystem.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Point")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("TestSystem.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdCourse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdFaculty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentFirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentMiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentSecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TestSystem.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdCourse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdFaculty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("TestSystem.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherFirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherLogin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherMiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherSecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("TestSystem.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdSubject")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTeacher")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TestId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestSystem.Models.AnsQuestion", b =>
                {
                    b.HasOne("TestSystem.Models.Answer", "Answer")
                        .WithMany("AnsQuestions")
                        .HasForeignKey("AnswerId");

                    b.HasOne("TestSystem.Models.Question", "Question")
                        .WithMany("AnsQuestions")
                        .HasForeignKey("QuestionId");

                    b.HasOne("TestSystem.Models.Student", "Student")
                        .WithMany("AnsQuestions")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TestSystem.Models.Answer", b =>
                {
                    b.HasOne("TestSystem.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("TestSystem.Models.Question", b =>
                {
                    b.HasOne("TestSystem.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("TestSystem.Models.Student", b =>
                {
                    b.HasOne("TestSystem.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("TestSystem.Models.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("TestSystem.Models.Subject", b =>
                {
                    b.HasOne("TestSystem.Models.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId");

                    b.HasOne("TestSystem.Models.Faculty", "Faculty")
                        .WithMany("Subjects")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("TestSystem.Models.Test", b =>
                {
                    b.HasOne("TestSystem.Models.Subject", "Subject")
                        .WithMany("Tests")
                        .HasForeignKey("SubjectId");

                    b.HasOne("TestSystem.Models.Teacher", "Teacher")
                        .WithMany("Tests")
                        .HasForeignKey("TeacherId");
                });
#pragma warning restore 612, 618
        }
    }
}
